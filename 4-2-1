using System;

class Program
{
    static void Main()
    {
        // Пример матрицы 5x7
        int[,] matrix = {
            { 1, 2, 3, 4, 5, 6, 7 },
            { 8, 9, 10, 11, 12, 13, 14 },
            { 15, 16, 17, 18, 19, 20, 21 },
            { 22, 23, 24, 252, 26, 27, 28 },
            { 29, 30, 31, 32, 33, 34, 35 }
        };

        int rows = matrix.GetLength(0); // Количество строк
        int cols = matrix.GetLength(1); // Количество столбцов

        // Обрабатываем каждую строку матрицы
        for (int i = 0; i < rows; i++)
        {
            int maxIndex = 0; // Индекс максимального элемента в текущей строке

            // Находим индекс максимального элемента в строке
            for (int j = 1; j < cols; j++)
            {
                if (matrix[i, j] > matrix[i, maxIndex])
                {
                    maxIndex = j;
                }
            }

            // Проверяем, является ли максимальный элемент первым или последним в строке
            if (maxIndex == 0)
            {
                // Увеличиваем в 2 раза только правый соседний элемент
                matrix[i, maxIndex + 1] *= 2;
            }
            else if (maxIndex == cols - 1)
            {
                // Увеличиваем в 2 раза только левый соседний элемент
                matrix[i, maxIndex - 1] *= 2;
            }
            else
            {
                // Сравниваем соседние элементы и увеличиваем меньший в 2 раза
                if (matrix[i, maxIndex - 1] < matrix[i, maxIndex + 1])
                {
                    matrix[i, maxIndex - 1] *= 2;
                }
                else
                {
                    matrix[i, maxIndex + 1] *= 2;
                }
            }
        }

        // Вывод результата
        Console.WriteLine("Матрица после обработки:");
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < cols; j++)
            {
                Console.Write(matrix[i, j] + " ");
            }
            Console.WriteLine();
        }
    }
}
