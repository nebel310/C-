using System;

class Program
{
    static void Main()
    {
        int n = 4; // Количество строк
        int m = 3; // Количество столбцов

        // Исходная матрица
        int[,] matrix = {
            { 1, 2, 3 },
            { 0, 0, 0 },
            { 4, 5, 6 },
            { 0, 7, 8 }
        };

        // Вывод исходной матрицы
        Console.WriteLine("Исходная матрица:");
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < m; j++)
            {
                Console.Write(matrix[i, j] + " ");
            }
            Console.WriteLine();
        }

        // Удаление строк, содержащих нулевые элементы
        int newN = 0; // Количество оставшихся строк
        for (int i = 0; i < n; i++)
        {
            bool hasZero = false;
            for (int j = 0; j < m; j++)
            {
                if (matrix[i, j] == 0)
                {
                    hasZero = true;
                    break;
                }
            }
            if (!hasZero)
            {
                newN++;
            }
        }

        // Создание новой матрицы без строк с нулевыми элементами
        int[,] newMatrix = new int[newN, m];
        int newRow = 0;
        for (int i = 0; i < n; i++)
        {
            bool hasZero = false;
            for (int j = 0; j < m; j++)
            {
                if (matrix[i, j] == 0)
                {
                    hasZero = true;
                    break;
                }
            }
            if (!hasZero)
            {
                for (int j = 0; j < m; j++)
                {
                    newMatrix[newRow, j] = matrix[i, j];
                }
                newRow++;
            }
        }

        // Вывод результата
        Console.WriteLine("\nМатрица после удаления строк с нулевыми элементами:");
        for (int i = 0; i < newN; i++)
        {
            for (int j = 0; j < m; j++)
            {
                Console.Write(newMatrix[i, j] + " ");
            }
            Console.WriteLine();
        }
    }
}
